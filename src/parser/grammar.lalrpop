use ::ast;
use std::str::FromStr;

grammar;

pub Command: ast::Command = {
    Assign => ast::Command::Assign(<>),
    RVal   => ast::Command::RVal(<>),
};

Assign: ast::Assign
    = <lhs: LVal> "<-" <rhs: RVal>
    => ast::Assign(lhs, rhs);

pub Ident: ast::Ident
    = <s:r"[a-zA-Z_][a-zA-Z0-9_]*">
    => ast::Ident(s.to_string());

pub Num: ast::Num
    = r"-?[0-9]*(\.[0-9]*)?"
    => ast::Num(f64::from_str(<>).unwrap());

pub AExp: ast::RVal = AExp_Add_Sub => <>;

AExp_Add_Sub: ast::RVal = {
    <f:AExp_Add_Sub> "+" <s:AExp_Mul_Div> =>
        ast::RVal::OpAdd(Box::new(f),
                         Box::new(s)),
    <f:AExp_Add_Sub> "-" <s:AExp_Mul_Div> =>
        ast::RVal::OpSub(Box::new(f),
                         Box::new(s)),
    AExp_Mul_Div => <>,
};

AExp_Mul_Div: ast::RVal = {
    <f: AExp_Mul_Div> "*" <s: AExp_Recur> =>
        ast::RVal::OpMul(Box::new(f),
                         Box::new(s)),
    <f: AExp_Mul_Div> "/" <s: AExp_Recur> =>
        ast::RVal::OpDiv(Box::new(f),
                         Box::new(s)),
    AExp_Recur => <>,
};

AExp_Recur: ast::RVal = {
    RVal_Non_Arith   => <>,
    "(" <e:AExp> ")" => e,
};

pub RVal: ast::RVal = {
    AExp           => <>,
};

RVal_Non_Arith: ast::RVal = {
    FuncCall => ast::RVal::FuncCall(<>),
    Num      => ast::RVal::Num(<>),
    LVal     => ast::RVal::LVal(<>),
};

pub LVal: ast::LVal = {
    Ident => ast::LVal::Var(<>),
};

pub FuncCall: ast::FuncCall
    = <i: Ident> "(" <args: ParamList> ")"
    => ast::FuncCall { name: i, args: args };

pub ParamList: Vec<ast::RVal>
    = <v:(<RVal> ",")*> <e:RVal?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    };

pub FuncHead: ast::FuncHead
    = "fn" <name: Ident> "(" <params: ParamList> ")"
    => ast::FuncHead {
        name: name,
        params: params
    };
